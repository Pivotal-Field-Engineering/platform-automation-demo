resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: pcf-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation

- name: pcf-automation-image-fixes
  type: docker-image
  source:
    repository: cwashburn/platform-automation-fixes

- name: configuration
  type: git
  source:
    uri: git@github.com:doddatpivotal/platform-automation-example.git
    private_key: ((configuration_git_repo.private_key))

- name: configuration2
  type: git
  source:
    uri: git@github.com:doddatpivotal/platform-automation-example.git
    private_key: ((configuration_git_repo.private_key))

jobs:

- name: upload-and-stage-product
  serial: true
  plan:
  - aggregate:
    - get: configuration
      # trigger: true
      params:
        unpack: true
    - get: pcf-automation-image
      resource: pcf-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: pcf-automation-tasks
      resource: pcf-automation
      params:
        unpack: true
        globs: ["*tasks*"]
    - get: pcf-automation-image-fixes
  
  - task: credhub-interpolate
    image: pcf-automation-image-fixes
    file: configuration/fixes/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      PREFIX: '/((foundation))-foundation'
      INTERPOLATION_PATH: "((foundation))/config"
    input_mapping:
      files: configuration
    output_mapping:
      interpolated-files: configuration

  - task: download-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
    params:
      CONFIG_FILE: ((foundation))/config/versions/cf.yml

  - task: upload-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: downloaded-product
      env: configuration
    params:
      ENV_FILE: ((foundation))/config/templates/env.yml

  - task: stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: downloaded-product
      env: configuration
    params:
      ENV_FILE: ((foundation))/config/templates/env.yml

  - task: upload-product-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration
      stemcell: downloaded-stemcell
    params:
      ENV_FILE: ((foundation))/config/templates/env.yml

  # - task: assign-stemcell
  #   image: pcf-automation-image
  #   file: pcf-automation-tasks/tasks/assign-stemcell.yml
  #   input_mapping:
  #     env: configuration
  #     config: assign-stemcell-config
  #   params:
  #     ENV_FILE: ((foundation))/config/templates/env.yml

- name: configure-and-apply-product-changes
  serial: true
  plan:

  - aggregate:
    - get: configuration
      trigger: true
      passed: [ upload-and-stage-product ]
      params:
        unpack: true
    - get: configuration2
      params:
        unpack: true
    - get: pcf-automation-image
      resource: pcf-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: pcf-automation-tasks
      resource: pcf-automation
      params:
        unpack: true
        globs: ["*tasks*"]
    - get: pcf-automation-image-fixes

  - task: credhub-interpolate
    image: pcf-automation-image-fixes
    file: configuration/fixes/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      PREFIX: '/((foundation))-foundation'
      INTERPOLATION_PATH: "((foundation))/config"
    input_mapping:
      files: configuration2
    output_mapping:
      interpolated-files: configuration2
      

  - task: create-certs
    image: pcf-automation-image
    config:
      platform: linux
      inputs:
        - name: configuration
        - name: configuration2
      params:
        CONFIG_FILE: ((foundation))/config/templates/cf.yml
        VARS_FILES: configuration2/((foundation))/config/defaults/cf.yml configuration2/((foundation))/config/vars/cf.yml
        ENV_FILE: configuration2/((foundation))/config/templates/env.yml
        CORE_DOMAIN: ((core_domain))
        CLOUD_CONTROLLER_SYSTEM_DOMAIN: ((cloud_controller_system_domain))
        CLOUD_CONTROLLER_APPS_DOMAIN: ((cloud_controller_apps_domain))
        CREDHUB_CLIENT: concourse_to_credhub
        CREDHUB_SECRET: ((concourse_to_credhub_secret))
        CREDHUB_SERVER: ((credhub_server))
        CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
        PREFIX: '/((foundation))-foundation'
      run:
        path: bash
        args:
          - -c
          - |
            p-automator -v
            # set -eux

            curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x jq

            {
              DOMAINS="*.$CORE_DOMAIN,*.$CLOUD_CONTROLLER_SYSTEM_DOMAIN,*.$CLOUD_CONTROLLER_APPS_DOMAIN,*.login.$CLOUD_CONTROLLER_SYSTEM_DOMAIN,*.uaa.$CLOUD_CONTROLLER_SYSTEM_DOMAIN"
              CERTIFICATE=`om --env "${ENV_FILE}" generate-certificate -d $DOMAINS`
              export OM_VAR_networking_poe_ssl_certs_0_certificate_cert_pem=`echo $CERTIFICATE | ./jq ".certificate" -r`
              export OM_VAR_networking_poe_ssl_certs_0_certificate_private_key_pem=`echo $CERTIFICATE | ./jq ".key" -r`

              DOMAINS="*.login.$CLOUD_CONTROLLER_SYSTEM_DOMAIN,*.uaa.$CLOUD_CONTROLLER_SYSTEM_DOMAIN"
              CERTIFICATE=`om --env "${ENV_FILE}" generate-certificate -d $DOMAINS`
              export OM_VAR_uaa_service_provider_key_credentials_cert_pem=`echo $CERTIFICATE | ./jq ".certificate" -r`
              export OM_VAR_uaa_service_provider_key_credentials_private_key_pem=`echo $CERTIFICATE | ./jq ".key" -r`

            } 2> /dev/null

            credhub api $CREDHUB_SERVER --ca-cert $CREDHUB_CA_CERT
            credhub login -u $CREDHUB_CLIENT -p $CREDHUB_SECRET

            credhub set -t certificate -n '/$PREFIX/cf/networking_poe_ssl_certs_0_certificate' \
              -c $OM_VAR_networking_poe_ssl_certs_0_certificate_cert_pem\
              -p $OM_VAR_networking_poe_ssl_certs_0_certificate_private_key_pem

            credhub set -t certificate -n '/$PREFIX/cf/uaa_service_provider_key_credentials' \
              -c $OM_VAR_uaa_service_provider_key_credentials_cert_pem\
              -p $OM_VAR_uaa_service_provider_key_credentials_private_key_pem

  - task: credhub-interpolate-again
    image: pcf-automation-image-fixes
    file: configuration/fixes/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      PREFIX: '/((foundation))-foundation'
      INTERPOLATION_PATH: "((foundation))/config"
    input_mapping:
      files: configuration2
    output_mapping:
      interpolated-files: configuration2

  - task: configure-product
      image: pcf-automation-image
      file: pcf-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: ((foundation))/config/templates/cf.yml
        VARS_FILES: vars/((foundation))/config/defaults/cf.yml vars/((foundation))/config/vars/cf.yml
        ENV_FILE: ((foundation))/config/templates/env.yml

  - task: apply-product-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration2
    params:
      ENV_FILE: ((foundation))/config/templates/env.yml
